/*
 * Copyright (c) 2015 Mind Eratosthenes Kft.
 * License: AGPL v3
 */
package com.mind_era.zizized.util

import com.mind_era.zizized.util._
import spire.math.UInt
import scala.collection.mutable.Stack

/**
 * TODO document package com.mind_era.zizized.sat.IdGenerator
 *
 * An IDGenerator generates a sequence of UInts, starting from a given seed @nextId
 * The generated IDs can be 'recycled'. Recycled IDs are re-generated as soon as possible.
 * @constructor create a new generator with the specified seed.
 * @param nextId the first ID that should be generated. Subsequent calls of mk() will generate larger and larger IDs.
 *
 * @author Szabolcs Ivan
 * @since 1.0
 */
class IdGenerator(var nextId: UInt = UInt(0)) {
  /**
   * The set of recycled IDs.
   * TODO check whether code relies on it being a LIFO container.
   */
  val freeIds: Stack[UInt] = new Stack[UInt]
  /**
   * Returns an ID which is either not generated yet or is recycled.
   */
  def mk(): UInt = if (freeIds.isEmpty) { val r = nextId; nextId += UInt(1); r } else { freeIds.pop() }
  /** Marks an ID as recycled. Reycled ID-s will be re-generated by mk(). */
  def recycle(id: UInt): Unit = discard { freeIds.push(id) }
  /** Resets the generator to the seed start. Recycles all previously generated IDs. */
  def reset(start: UInt = UInt(0)): Unit = { nextId = start; freeIds.clear() }
  def cleanup(start: UInt = UInt(0)): Unit = reset(start) // TODO probably should be merged with reset(_)
  def showHash(): Int = 0 // TODO implement string hashing
  /** Returns a value R such that each ID generated since the last reset is less than R. */
  def getIdRange: UInt = nextId
  /** Sets the ID to be generated next to the least one which is >= id and is not recycled. */
  def setNextId(id: UInt): UInt = {
    nextId = id;
    while (freeIds.contains(id)) { nextId = nextId + UInt(1) };
    // TODO using a heap, say, could be better if LIFO is not specified exactly
    // cpp docs say that this function is for debugging only, thus LIFO is okay.
    nextId
  }
  def displayFreeIds: String = freeIds.mkString(",") //TODO check that ::display func
}